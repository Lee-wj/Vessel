//#include <vtkVersion.h>
//#include <vtkBooleanOperationPolyDataFilter.h>
//
//#include <vtkActor.h>
//#include <vtkPolyDataReader.h>
//#include <vtkPolyDataMapper.h>
//#include <vtkProperty.h>
//#include <vtkRenderer.h>
//#include <vtkRenderWindow.h>
//#include <vtkRenderWindowInteractor.h>
//#include <vtkSmartPointer.h>
//#include <vtkSphereSource.h>
//#include <vtkOBJReader.h>
//#include <vtkMarchingCubes.h>
//#include <vtkStripper.h>
//#include <vtkTubeFilter.h>
//#include <vtkLineSource.h>
//#include <vtkCylinderSource.h>
//
//
//#include <vtkAutoInit.h> 
//VTK_MODULE_INIT(vtkRenderingOpenGL2);
//VTK_MODULE_INIT(vtkInteractionStyle);
//VTK_MODULE_INIT(vtkRenderingFreeType)
//
//int main(int argc, char *argv[])
//{
//	vtkSmartPointer<vtkPolyData> input1;
//	vtkSmartPointer<vtkPolyData> input2;
//	vtkSmartPointer<vtkPolyData> input3;
//
//	std::string operation("union");
//
//	/*vtkSmartPointer<vtkOBJReader> reader1 =
//		vtkSmartPointer<vtkOBJReader>::New();
//	reader1->SetFileName("D:\\Program_Files\\vtk\\vessel_model\\union\\vesselKid1.obj");
//	reader1->Update();
//	input1 = reader1->GetOutput();
//
//	vtkSmartPointer<vtkOBJReader> reader2 =
//		vtkSmartPointer<vtkOBJReader>::New();
//	reader2->SetFileName("D:\\Program_Files\\vtk\\vessel_model\\union\\vesselKid2.obj");
//	reader2->Update();
//	input2 = reader2->GetOutput();*/
//
//	/*vtkSmartPointer<vtkOBJReader> reader3 =
//		vtkSmartPointer<vtkOBJReader>::New();
//	reader3->SetFileName("D:\\Program_Files\\vtk\\vessel_model\\union\\vessel.obj");
//	reader3->Update();
//	input3 = reader3->GetOutput();*/
//
//	vtkSmartPointer<vtkSphereSource> sphereSource1 =
//		vtkSmartPointer<vtkSphereSource>::New();
//	sphereSource1->SetCenter(.25, 0, 0);
//	sphereSource1->Update();
//	input1 = sphereSource1->GetOutput();
//
//	vtkSmartPointer<vtkCylinderSource> cylinderSource =
//		vtkSmartPointer<vtkCylinderSource>::New();
//	cylinderSource->SetHeight(5.0);
//	cylinderSource->SetCenter(0.0, 0.0, 0.0);
//	cylinderSource->SetRadius(1.0);
//	cylinderSource->SetResolution(50);
//	//input1 = cylinderSource->GetOutput();
//
//	vtkSmartPointer<vtkSphereSource> sphereSource2 =
//		vtkSmartPointer<vtkSphereSource>::New();
//	//sphereSource2->SetCenter(-0.5, 0, 0);
//	sphereSource2->Update();
//	input2 = sphereSource2->GetOutput();
//
////	vtkSmartPointer<vtkLineSource> lineSource =
////		vtkSmartPointer<vtkLineSource>::New();
////	lineSource->SetPoint1(1.0, 0.0, 0.0);
////	lineSource->SetPoint2(0.0, 1.0, 0.0);
////
////	vtkSmartPointer<vtkPolyDataMapper> lineMapper =
////		vtkSmartPointer<vtkPolyDataMapper>::New();
////	lineMapper->SetInputConnection(lineSource->GetOutputPort());
////	vtkSmartPointer<vtkActor> lineActor =
////		vtkSmartPointer<vtkActor>::New();
////	lineActor->GetProperty()->SetColor(0.0, 0.0, 0.1); // Give some color to the line
////	lineActor->SetMapper(lineMapper);
////
////	vtkSmartPointer<vtkTubeFilter> tubeFilter =
////		vtkSmartPointer<vtkTubeFilter>::New();
////	tubeFilter->SetInputConnection(lineSource->GetOutputPort());
////	tubeFilter->SetRadius(.025); //default is .5
////	tubeFilter->SetNumberOfSides(50);
////	tubeFilter->Update();
////	input1 = tubeFilter->GetOutput();
////
////	vtkSmartPointer<vtkLineSource> lineSource1 =
////		vtkSmartPointer<vtkLineSource>::New();
////	lineSource1->SetPoint1(1.0, 0.0, 0.0);
////	lineSource1->SetPoint2(0.0, 1.0, 0.0);
////
////	vtkSmartPointer<vtkPolyDataMapper> lineMapper1 =
////		vtkSmartPointer<vtkPolyDataMapper>::New();
////	lineMapper1->SetInputConnection(lineSource1->GetOutputPort());
////	vtkSmartPointer<vtkActor> lineActor1 =
////		vtkSmartPointer<vtkActor>::New();
////	lineActor1->GetProperty()->SetColor(0.0, 0.0, 0.1); // Give some color to the line
////	lineActor1->SetMapper(lineMapper1);
////
////	vtkSmartPointer<vtkTubeFilter> tubeFilter1 =
////		vtkSmartPointer<vtkTubeFilter>::New();
////	tubeFilter1->SetInputConnection(lineSource1->GetOutputPort());
////	tubeFilter1->SetRadius(.025); //default is .5
////	tubeFilter1->SetNumberOfSides(50);
////	tubeFilter1->Update();
////	input2 = tubeFilter1->GetOutput();
////
////	vtkSmartPointer<vtkPolyDataMapper> input1Mapper =
////		vtkSmartPointer<vtkPolyDataMapper>::New();
////#if VTK_MAJOR_VERSION <= 5
////	input1Mapper->SetInputConnection(input1->GetProducerPort());
////#else
////	input1Mapper->SetInputData(input1);
////#endif
////	input1Mapper->ScalarVisibilityOff();
////	vtkSmartPointer<vtkActor> input1Actor =
////		vtkSmartPointer<vtkActor>::New();
////	input1Actor->SetMapper(input1Mapper);
////	input1Actor->GetProperty()->SetColor(1, 0, 0);
////	input1Actor->SetPosition(
////		input1->GetBounds()[1] - input1->GetBounds()[0],
////		0, 0);
////	vtkSmartPointer<vtkPolyDataMapper> input2Mapper =
////		vtkSmartPointer<vtkPolyDataMapper>::New();
////#if VTK_MAJOR_VERSION <= 5
////	input2Mapper->SetInputConnection(input2->GetProducerPort());
////#else
////	input2Mapper->SetInputData(input2);
////#endif
////	input2Mapper->ScalarVisibilityOff();
////	vtkSmartPointer<vtkActor> input2Actor =
////		vtkSmartPointer<vtkActor>::New();
////	input2Actor->SetMapper(input2Mapper);
////	input2Actor->GetProperty()->SetColor(0, 1, 0);
////	input2Actor->SetPosition(
////		-(input2->GetBounds()[1] - input2->GetBounds()[0]),
////		0, 0);
////
////	vtkSmartPointer<vtkBooleanOperationPolyDataFilter> booleanOperation =
////		vtkSmartPointer<vtkBooleanOperationPolyDataFilter>::New();
////	booleanOperation->SetOperationToUnion();
////	booleanOperation->SetInputData(0, input1);
////	booleanOperation->SetInputData(1, input2);
//
//	//vtkSmartPointer<vtkMarchingCubes> marchingcube = vtkSmartPointer<vtkMarchingCubes>::New();
//	//marchingcube->SetInputData( input3);//获得读取的数据的点集；
//	//marchingcube->SetValue(0, 200);//Setting the threshold;
//	//marchingcube->ComputeNormalsOn();//计算表面法向量;
//	//vtkSmartPointer<vtkStripper> Stripper = vtkSmartPointer<vtkStripper>::New();
//	//Stripper->SetInputConnection(marchingcube->GetOutputPort());//获取三角片
//	//vtkSmartPointer<vtkPolyDataMapper> mapper =
//	//	vtkSmartPointer<vtkPolyDataMapper>::New();
//	//mapper->SetInputData(Stripper->GetOutput());
//	//mapper->ScalarVisibilityOff();
//	//vtkSmartPointer<vtkActor> actor =
//	//	vtkSmartPointer<vtkActor>::New();
//	//actor->SetMapper(mapper);
//	//actor->GetProperty()->SetRepresentationToWireframe();
//
//		vtkSmartPointer<vtkBooleanOperationPolyDataFilter> booleanOperation =
//		vtkSmartPointer<vtkBooleanOperationPolyDataFilter>::New();
//	booleanOperation->SetOperationToUnion();
//	booleanOperation->SetInputData(0, input1);
//	booleanOperation->SetInputData(1, input2);
//
//	vtkSmartPointer<vtkPolyDataMapper> booleanOperationMapper =
//		vtkSmartPointer<vtkPolyDataMapper>::New();
//	booleanOperationMapper->SetInputConnection(booleanOperation->GetOutputPort());
//	booleanOperationMapper->ScalarVisibilityOff();
//
//	vtkSmartPointer<vtkActor> booleanOperationActor =
//		vtkSmartPointer<vtkActor>::New();
//	booleanOperationActor->SetMapper(booleanOperationMapper);
//	booleanOperationActor->GetProperty()->SetRepresentationToWireframe();
//
//	vtkSmartPointer<vtkRenderer> renderer =
//		vtkSmartPointer<vtkRenderer>::New();
//	/*renderer->AddViewProp(input1Actor);
//	renderer->AddViewProp(input2Actor);*/
//	renderer->AddViewProp(booleanOperationActor);
//	//renderer->AddViewProp(actor);
//	renderer->SetBackground(.1, .2, .3);
//	vtkSmartPointer<vtkRenderWindow> renderWindow =
//		vtkSmartPointer<vtkRenderWindow>::New();
//	renderWindow->AddRenderer(renderer);
//
//	vtkSmartPointer<vtkRenderWindowInteractor> renWinInteractor =
//		vtkSmartPointer<vtkRenderWindowInteractor>::New();
//	renWinInteractor->SetRenderWindow(renderWindow);
//
//	renderWindow->Render();
//	renWinInteractor->Start();
//
//	return EXIT_SUCCESS;
//}