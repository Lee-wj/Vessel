//#include <string>  
//#include <json.h>
//#include <iostream>  
//#include <fstream> 
//#include <cstdlib>
//#include <vector> 
//#include <stack>
//
//#include "vtkSmartPointer.h"
//#include "vtkActor.h"
//#include "vtkCamera.h"
//#include "vtkCellArray.h"
//#include "vtkPoints.h"
//#include "vtkPolyData.h"
//#include "vtkPointData.h"
//#include "vtkPolyDataMapper.h"
//#include "vtkRenderWindow.h"
//#include "vtkRenderWindowInteractor.h"
//#include "vtkRenderer.h" 
//#include "vtkProperty.h"
//#include "vtkTubeFilter.h"
//#include "vtkDoubleArray.h"
//#include "vtkParametricSpline.h"
//#include "vtkParametricFunctionSource.h"
//#include "vtkTupleInterpolator.h"
//#include "vtkIntersectionPolyDataFilter.h"
//#include "vtkAssembly.h"
//#include "vtkOBJExporter.h"
//
//#include <vtkAutoInit.h> 
//VTK_MODULE_INIT(vtkRenderingOpenGL2);
//VTK_MODULE_INIT(vtkInteractionStyle);
//VTK_MODULE_INIT(vtkRenderingFreeType)
//
//using namespace std;
//
//class Branch;
//class Branch
//{
//public:
//	double radius=0;
//	bool isShow = false;
//	vector<Branch> children;
//	vector<int> childenId;
//	int kidLen=0;
//	vector<int> pos;
//	int posLen=0;
//};
//
//vector<Branch> readFileJson();
//
//int main(int argc, char *argv[])
//{
//	//渲染场景
//	vtkSmartPointer<vtkRenderer> renderer =
//		vtkSmartPointer<vtkRenderer>::New();
//	vtkSmartPointer<vtkRenderWindow> renderWindow =
//		vtkSmartPointer<vtkRenderWindow>::New();
//	renderWindow->AddRenderer(renderer);
//	vtkSmartPointer<vtkRenderWindowInteractor> renderWindowInteractor =
//		vtkSmartPointer<vtkRenderWindowInteractor>::New();
//	renderWindowInteractor->SetRenderWindow(renderWindow);
//
//	//血管数据
//	vector<Branch> branches = readFileJson();
//
//	//血管模型建立
//	vtkSmartPointer<vtkAssembly> assembly =
//		vtkSmartPointer<vtkAssembly>::New();
//	int count = 0;
//	char file[5][100] = {
//		"D:\\Program_Files\\vtk\\vessel_model\\vesselkid1",
//		"D:\\Program_Files\\vtk\\vessel_model\\vesselkid2",
//		"D:\\Program_Files\\vtk\\vessel_model\\vesselkid3",
//		"D:\\Program_Files\\vtk\\vessel_model\\vesselkid4",
//		"D:\\Program_Files\\vtk\\vessel_model\\vesselkid5"
//	};
//	for (int i = 0; i < branches.size(); i++) {
//		if (branches[i].isShow == false) {
//			vtkSmartPointer<vtkPoints> points = vtkSmartPointer<vtkPoints>::New();
//			int indexPos = 0;
//			double rad;
//			vtkSmartPointer<vtkTupleInterpolator> interpolatedRadius =
//				vtkSmartPointer<vtkTupleInterpolator> ::New();
//			interpolatedRadius->SetInterpolationTypeToLinear();
//			interpolatedRadius->SetNumberOfComponents(1);
//			int indexRad = 0;
//			bool flag = true;
//			Branch* target = &branches[i];
//			while (flag) {
//				target->isShow = true;
//				rad = target->radius; interpolatedRadius->AddTuple(indexRad++, &rad);
//				rad = target->radius; interpolatedRadius->AddTuple(indexRad++, &rad);
//				for (int j = 0; j < target->posLen; j += 2) {
//					points->InsertPoint(indexPos++, target->pos[j + 1], target->pos[j], 0);
//				}
//				if (target->kidLen != 0 && branches[target->childenId[0]].isShow == false) {
//					target = &branches[target->childenId[0]];
//				}
//				else {
//					flag = false;
//				}
//			}
//			vtkSmartPointer<vtkParametricSpline> spline = vtkSmartPointer<vtkParametricSpline>::New();
//			spline->SetPoints(points);
//			vtkSmartPointer<vtkParametricFunctionSource> functionSource =
//				vtkSmartPointer<vtkParametricFunctionSource>::New();
//			functionSource->SetParametricFunction(spline);
//			functionSource->SetUResolution(10 * points->GetNumberOfPoints());
//			functionSource->Update();
//
//			vtkSmartPointer<vtkDoubleArray> tubeRadius =
//				vtkSmartPointer<vtkDoubleArray>::New();
//			unsigned int n = functionSource->GetOutput()->GetNumberOfPoints();
//			std::cout << "n:" << n;
//			tubeRadius->SetNumberOfValues(n);
//			tubeRadius->SetName("TubeRadius");
//			double tMin = interpolatedRadius->GetMinimumT(); std::cout << "tMin:" << tMin;
//			double tMax = interpolatedRadius->GetMaximumT(); std::cout << "tMax:" << tMax;
//			double r;
//			for (unsigned int k = 0; k < n; ++k)
//			{
//				double t = (tMax - tMin) / (n - 1) * k + tMin;
//				interpolatedRadius->InterpolateTuple(t, &r);
//				tubeRadius->SetTuple1(k, r);
//			}
//
//			vtkSmartPointer<vtkPolyData> tubePolyData =
//				vtkSmartPointer<vtkPolyData>::New();
//			tubePolyData = functionSource->GetOutput();
//			tubePolyData->GetPointData()->AddArray(tubeRadius);
//			tubePolyData->GetPointData()->SetActiveScalars("TubeRadius");
//
//			vtkSmartPointer<vtkTubeFilter> tuber =
//				vtkSmartPointer<vtkTubeFilter>::New();
//			tuber->SetInputData(tubePolyData);
//			tuber->SetNumberOfSides(50);
//			tuber->SetVaryRadiusToVaryRadiusByAbsoluteScalar();
//			//tuber->SetCapping(true);
//
//			vtkSmartPointer<vtkPolyDataMapper> tubeMapper =
//				vtkSmartPointer<vtkPolyDataMapper>::New();
//			tubeMapper->SetInputConnection(tuber->GetOutputPort());
//			//tubeMapper->SetScalarRange(tubePolyData->GetScalarRange());
//			tubeMapper->ScalarVisibilityOff();
//
//			vtkSmartPointer<vtkActor> tubeActor = vtkSmartPointer<vtkActor>::New();
//			tubeActor->SetMapper(tubeMapper);
//			//tubeActor->GetProperty()->SetOpacity(0.3);
//			tubeActor->GetProperty()->SetColor(1, 0.09, 0.20);
//			tubeActor->GetProperty()->SetRepresentationToWireframe();
//
//			assembly->AddPart(tubeActor);
//
//			vtkSmartPointer<vtkRenderer> rendererKid =
//				vtkSmartPointer<vtkRenderer>::New();
//			vtkSmartPointer<vtkRenderWindow> renderWindowKid =
//				vtkSmartPointer<vtkRenderWindow>::New();
//			renderWindowKid->AddRenderer(rendererKid);
//			rendererKid->AddActor(tubeActor);
//			cout << endl;
//			cout << count << endl;
//			vtkSmartPointer<vtkOBJExporter> porterKid = vtkSmartPointer<vtkOBJExporter>::New();
//			porterKid->SetFilePrefix(file[count++]);
//			porterKid->SetInput(renderWindowKid);
//			porterKid->Write();
//		}
//	}
//	
//
//	renderer->AddActor(assembly);
//	renderer->SetBackground(.2, .3, .4);
//	renderWindow->SetSize(800, 800);
//	renderWindow->Render();
//	renderWindowInteractor->Start();
//
//	return EXIT_SUCCESS;
//}
//
//vector<Branch> readFileJson()
//{
//	Json::Reader reader;
//	Json::Value root;
//
//	vector<Branch> tempbranches;
//
//	//从文件中读取，保证当前文件有branches.json文件  
//	ifstream in("D:\\Program_Files\\OpenCV\\Projects\\OpenCVTest1Img\\branches.json", ios::binary);
//
//	if (!in.is_open())
//	{
//		cout << "Error opening file\n";
//		return tempbranches;
//	}
//
//	if (reader.parse(in, root))
//	{
//		//读取数组信息  
//		int numBranch = root["lines"].size();
//		vector<Branch> branches(numBranch);
//
//		for (unsigned int i = 0; i < numBranch; i++)
//		{
//			//cout << root["lines"][i] << endl;
//			Branch node;
//			int len = root["lines"][i].size();
//			int step = 10;
//			int newlen = 0;
//			int j1 = 0;
//			for (j1; j1 < len; j1 += step) {
//				newlen += 2;
//			}
//			if (j1 - 10 != len - 1) {
//				newlen += 2;
//			}
//			node.posLen = newlen;
//			vector<int> p(newlen);
//			int index = 0;
//			int j = 0;
//			for (j; j < len; j += step) {
//				for (int k = 0; k < root["lines"][i][j].size(); k++) {
//					p[index++] = root["lines"][i][j][k].asInt();
//				}
//			}
//			if (j - 10 != len - 1) {
//				for (int k = 0; k < root["lines"][i][len - 1].size(); k++) {
//					p[index++] = root["lines"][i][len - 1][k].asInt();
//				}
//			}
//			node.pos = p;
//			branches[i] = node;
//		}
//
//		for (int i = 0; i < numBranch; i++) {
//			int s = branches[i].posLen;
//			int kidlen = 0;
//			for (int j = 0; j < numBranch; j++) {
//				if (j != i &&
//					(branches[j].pos[0] >= branches[i].pos[s - 2] - 5) &&
//					(branches[j].pos[0] <= branches[i].pos[s - 2] + 5) &&
//					(branches[j].pos[1] >= branches[i].pos[s - 1] - 5) &&
//					(branches[j].pos[1] <= branches[i].pos[s - 1] + 5))
//				{
//					kidlen++;
//					branches[i].children.push_back(branches[j]);
//					branches[i].childenId.push_back(j);
//				}
//			}
//			branches[i].kidLen = kidlen;
//		}
//
//		//有问题
//		branches[0].radius = 20;
//		branches[1].radius = 15;
//		branches[2].radius = 15;
//		branches[3].radius = 11.25;
//		branches[4].radius = 8.4375;
//		branches[5].radius = 11.25;
//		branches[6].radius = 8.4375;
//		branches[7].radius = 8.4375;
//		branches[8].radius = 8.4375;
//
//		for (int i = 0; i < numBranch; i++) {
//			int numKid = branches[i].kidLen;
//			for (int j = 0; j < numKid; j++) {
//				branches[i].children[j].radius = branches[i].radius / numKid * 1.5;
//			}
//		}
//
//		//cout << "Reading Complete!" << endl;
//		return branches;
//	}
//	else
//	{
//		cout << "parse error\n" << endl;
//	}
//
//	in.close();
//
//	return tempbranches;
//}